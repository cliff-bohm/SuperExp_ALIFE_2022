% WORLD
  debug = 0                                  #(bool) run world in debug mode (if available)
  worldType = SawGenes                       #(string) world to be used, [NKLandscape, SawGenes]

% WORLD_NKLANDSCAPE
  k = 1                                      #(int) A number between 1 and N(genome size)
  mode = 0                                   #(int) 0 = bit outputs before adding, 1 = add outputs
  n = 1                                      #(int) A number that defines the genome size.
  numTraits = 1                              #(int) Number of redundant copies to include in one organizm. They are all independant but all contribute to fitness.

% WORLD_NKLANDSCAPE_NAMES
  genomeNameSpace = root::                   #(string) namespace for parameters used to define brain
  groupNameSpace = root::                    #(string) namespace of group to be evaluated

% WORLD_SawGenes
  geneSize = 7                               #(int) how many sites in each gene?
  geneToScore = 0,-.05,-.1,-.15,-.2,-.25,-.3,1 #(string) how to convert each gene to a gene score. agent score = sum of gene scores
  mode = int                                 #(string) mode is either bit or int.
                                             #    bit: genome will be read as (numGenes x geneSize) bits. Each set of geneSize bits, if bits are all within 1 of
                                             #  eachother, gene will converted using geneToScore, else gene score will be -100 (lethal). Agent score will be the
                                             #  sum of the gene scores.
                                             #    int: genome will be read is numGenes ints each converted to a gene score using geneToScore. geneToScore will be
                                             #  used as a signal step in a repeating fitness function. genome alphabet size will be used to determin site value ranges.
                                             #  Agent score will be the sum of the gene scores.
  numGenes = 10                              #(int) how many genes?
  popSize = -1x-1                            #(string) ',' seperated list of 'x' seperated values. [popSize:generation,popSize:generation,...], times must be in
                                             #  order
                                             #    e.g. 50x0,100x1000 will set popSize to 50 at generation 0, and then to 100 at 1000  use -1x-1 to use defualt popSize
                                             #  for all time  NOTE: the population genomes will be reset, even if the pop size does not change

