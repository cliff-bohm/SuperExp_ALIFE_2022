% GLOBAL
  initPop = default 1024                     #(string) initial population to start MABE (if it's .plf syntax it will be parsed as if preceded by "MASTER = ". If
                                             #  it's a file name with .plf that population loader file is parsed
  mode = run                                 #(string) mode to run MABE in [run,visualize,analyze]
  outputPrefix = ./                          #(string) Directory and prefix specifying where data files will be written
  randomSeed = 101                           #(int) seed for random number generator, if -1 random number generator will be seeded randomly
  updates = 40000                            #(int) how long the program will run

% ARCHIVIST
  outputMethod = Default                     #(string) output method, [Default, LODwAP]

% ARCHIVIST_DEFAULT
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  popFileColumns =                           #(string) data to be saved into average file (must be values that can generate an average). If empty, MABE will try
                                             #  to figure it out
  realtimeSequence = :1000                   #(string) How often to write to realtime data files. (format: x = single value, x-y = x to y, x-y:z = x to y on x,
                                             #  :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotDataSequence = :100                #(string) How often to save a realtime snapshot data file. (format: x = single value, x-y = x to y, x-y:z = x to y
                                             #  on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  snapshotOrganismsSequence = :1000          #(string) How often to save a realtime snapshot genome file. (format: x = single value, x-y = x to y, x-y:z = x to
                                             #  y on x, :z = from 0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  writeMaxFile = 1                           #(bool) Save data to Max file?
  writePopFile = 1                           #(bool) Save data to average file?
  writeSnapshotDataFiles = 0                 #(bool) if true, snapshot data files will be written (with all non genome data for entire population)
  writeSnapshotOrganismsFiles = 0            #(bool) if true, snapshot organisms files will be written (with all organisms for entire population)

% ARCHIVIST_LODWAP
  dataSequence = :1                          #(string) How often to write to data file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from
                                             #  0 to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  filePrefix = NONE                          #(string) prefix for files saved by this archivst. "NONE" indicates no prefix.
  organismsSequence = :1000                  #(string) How often to write genome file. (format: x = single value, x-y = x to y, x-y:z = x to y on x, :z = from 0
                                             #  to updates on z, x:z = from x to 'updates' on z) e.g. '1-100:10, 200, 300:100'
  pruneInterval = 100                        #(int) How often to attempt to prune LOD and actually write out to files
  terminateAfter = 10                        #(int) how long to run after updates (to get allow time for coalescence)
  writeDataFile = 1                          #(bool) if true, a data file will be written
  writeOrganismsFile = 1                     #(bool) if true, an organisms file will be written

% OPTIMIZER
  optimizer = DriftPoolLOD                   #(string) optimizer to be used, [DriftPoolLOD]

% OPTIMIZER_DRIFTPOOLLOD
  decayMode = GlobalMax                      #(string) how to regenerate decayed Super Explorers: GlobalMax,PopMax,PopProp
  driftPoolSize = 100                        #(int) Number of organisms in the drift pool.
  numberParents = 1                          #(int) number of parents used to produce offspring
  optimizeValue = DM_AVE[score]              #(string) value to optimize (MTree)
  poolDecayRate = 0.1                        #(double) Per organism per generation probability to decay and be replaced by max
  remapFunction = POW[2.72,$optVal$-$maxOptVal$] #(string) remap optimizeValue to affect strength of selection
                                             #  uses MTree, but adds the following options that can be used in place of MTree functions:
                                             #  $optVal$ = score of current organism
                                             #  $maxOptVal$ = maximum score in population
                                             #  $minOptVal$ = minimum score in population
                                             #  $aveOptVal$ = average score in population
                                             #  if NONE, no remap is preformed.
  selectionMethod = roulette                 #(string) selectionMethod roulette or tournament:[size]

% PARAMETER_FILES
  commentIndent = 45                         #(int) minimum space before comments
  maxLineLength = 160                        #(int) maximum line length

