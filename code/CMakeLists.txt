set(CMAKE_BUILD_TYPE ${BUILD_TYPE})
set(CMAKE_BUILD_TYPE Debug CACHE STRING "Options are: Debug or Release (case sensitive)")

## force VS to set release mode by default (mbuild provides this instead)
#set(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "config types" FORCE)

# OS-specific alterations
if (MSYS OR MINGW)
  # msys2 environment struggles with compiler detection
  message(STATUS "detected platform: msys/mingw on windows")
  set(CMAKE_C_COMPILER gcc)
  set(CMAKE_CXX_COMPILER g++)
endif()
if (MSVC OR WIN32)
  message(STATUS "detected platform: visual studio on windows")
endif()
if (UNIX AND NOT APPLE)
  message(STATUS "detected platform: linux")
endif()
if (APPLE)
  message(STATUS "detected platform: apple")
endif()

## write version information to c file (for ./mabe --version)
## but only if this is a git repo, and git exists
find_package(Git)
if ( (EXISTS ${PROJECT_SOURCE_DIR}/.git/) AND (Git_FOUND) )
  execute_process(
    COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
    WORKING_DIRECTORY ${PROJECT_SOURCE_DIR}
    OUTPUT_VARIABLE COMMIT_HASH
    )
  # remove newline from end of command output
  string(STRIP ${COMMIT_HASH} COMMIT_HASH)
  message(STATUS "Updating code/Utilities/gitversion.h")
  file(WRITE ${CMAKE_CURRENT_LIST_DIR}/Utilities/gitversion.h "const char *gitversion = \"${COMMIT_HASH}\";\n")
else()
  file(WRITE ${CMAKE_CURRENT_LIST_DIR}/Utilities/gitversion.h "const char *gitversion = \"\";\n")
endif()

## Attempt to set output directory for all projects
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../work )
set( CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/../work )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_LIST_DIR}/../work )
set( CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_LIST_DIR}/../work )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG ${CMAKE_CURRENT_LIST_DIR}/../work )
set( CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${CMAKE_CURRENT_LIST_DIR}/../work )

#
# Add the executable (entrypoint)
#
add_executable(${EXE} ${CMAKE_CURRENT_LIST_DIR}/main.cpp)

## set standard to c++17
set(CMAKE_CXX_STANDARD 17)
target_compile_features(${EXE} PRIVATE cxx_std_17)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)
## Attempt to set output directory for all projects
#set_target_properties( ${EXE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "../work" )
#set_target_properties( ${EXE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY ${CMAKE_CURRENT_LIST_DIR}/work )
## This sets the xcode output directory
set_target_properties(${EXE} PROPERTIES XCODE_ATTRIBUTE_CONFIGURATION_BUILD_DIR "work")
set_target_properties(${EXE} PROPERTIES RUNTIME_OUTPUT_DIRECTORY "../work")
set_property(GLOBAL PROPERTY USE_FOLDERS ON)
set_property(GLOBAL PROPERTY CMAKE_SKIP_INSTALL_ALL_DEPENDENCY ON)
set_property(GLOBAL PROPERTY CMAKE_SKIP_PACKAGE_ALL_DEPENDENCY ON)
set_property(GLOBAL PROPERTY CMAKE_STARTUP_PROJECT mabe)

## Useful directory-crawling macro
## example:
## SUBDIRLIST(SUBDIRS ${CMAKE_CURRENT_LIST_DIR})
## FOREACH(subdir ${SUBDIRS})
##   ADD_SUBDIRECTORY(${subdir})
## ENDFOREACH()
MACRO(SUBDIRLIST result curdir)
  FILE(GLOB children RELATIVE ${curdir} ${curdir}/*)
  SET(dirlist "")
  FOREACH(child ${children})
    IF(IS_DIRECTORY ${curdir}/${child})
      LIST(APPEND dirlist ${child})
    ENDIF()
  ENDFOREACH()
  SET(${result} ${dirlist})
ENDMACRO()

set(list_archivists Default)
set(list_brains)
set(list_genomes)
set(list_optimizers)
set(list_worlds)

function(register_module module_group module_name)
  set(fn_name)
  if("${module_group}" STREQUAL "Archivist")
    set(fn_name list_archivists)
  elseif("${module_group}" STREQUAL "Brain")
    set(fn_name list_brains)
  elseif("${module_group}" STREQUAL "Genome")
    set(fn_name list_genomes)
  elseif("${module_group}" STREQUAL "Optimizer")
    set(fn_name list_optimizers)
  elseif("${module_group}" STREQUAL "World")
    set(fn_name list_worlds)
  endif()
  set(${fn_name} ${${fn_name}} ${module_name} PARENT_SCOPE)
endfunction()

function(write_module_factories)
  # we will write to both the constructors.h and constructors.cpp files
  set(h ${CMAKE_CURRENT_LIST_DIR}/module_factories.h)
  set(cpp ${CMAKE_CURRENT_LIST_DIR}/module_factories.cpp)

  #
  # write consturctors.cpp
  #
  file(WRITE  ${cpp} "//  MABE is a product of The Hintze Lab @ MSU\n")
  file(APPEND ${cpp} "//     for general research information:\n")
  file(APPEND ${cpp} "//         http://hintzelab.msu.edu/\n")
  file(APPEND ${cpp} "//     for MABE documentation:\n")
  file(APPEND ${cpp} "//         github.com/Hintzelab/MABE/wiki\n")
  file(APPEND ${cpp} "//\n")
  file(APPEND ${cpp} "//  Copyright (c) 2019 Michigan State University. All rights reserved.\n")
  file(APPEND ${cpp} "//     to view the full license, visit:\n")
  file(APPEND ${cpp} "//          github.com/Hintzelab/MABE/wiki\n")
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//  This file was auto-generated from cmake\n")
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "#include <module_factories.h>\n")

  # write archivist factory
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//create an archivist\n")
  file(APPEND ${cpp} "auto makeArchivist(std::vector<std::string> popFileColumns, std::shared_ptr<Abstract_MTree> _maxFormula, std::shared_ptr<ParametersTable> PT, std::string groupPrefix = \"\") -> std::shared_ptr<DefaultArchivist> {\n")
  file(APPEND ${cpp} "  std::shared_ptr<DefaultArchivist> newArchivist;\n")
  file(APPEND ${cpp} "  bool found = false;\n")
  file(APPEND ${cpp} "  std::string archivistType = DefaultArchivist::Arch_outputMethodStrPL->get(PT);\n")
  foreach(module_name ${list_archivists})
    file(APPEND ${cpp} "  if (archivistType == \"${module_name}\") {\n")
    file(APPEND ${cpp} "    newArchivist = std::make_shared<${module_name}Archivist>(popFileColumns, _maxFormula, PT, groupPrefix);\n")
    file(APPEND ${cpp} "    found = true;\n")
    file(APPEND ${cpp} "    }\n")
  endforeach()
  file(APPEND ${cpp} "  if (!found){\n")
  file(APPEND ${cpp} "    std::cout << \"  ERROR! could not find ARCHIVIST-outputMethod \\\"\" << archivistType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${cpp} "    exit(1);\n")
  file(APPEND ${cpp} "    }\n")
  file(APPEND ${cpp} "  return newArchivist;\n")
  file(APPEND ${cpp} "}\n")

  # write brain factory
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//create a template brain\n")
  file(APPEND ${cpp} "auto makeTemplateBrain(int inputs, int outputs, std::shared_ptr<ParametersTable> PT) -> std::shared_ptr<AbstractBrain> {\n")
  file(APPEND ${cpp} "  std::shared_ptr<AbstractBrain> newBrain;\n")
  file(APPEND ${cpp} "  bool found = false;\n")
  file(APPEND ${cpp} "  std::string brainType = AbstractBrain::brainTypeStrPL->get(PT);\n")
  foreach(module_name ${list_brains})
    file(APPEND ${cpp} "  if (brainType == \"${module_name}\") {\n")
    file(APPEND ${cpp} "    newBrain = ${module_name}Brain_brainFactory(inputs, outputs, PT);\n")
    file(APPEND ${cpp} "    found = true;\n")
    file(APPEND ${cpp} "    }\n")
  endforeach()
  file(APPEND ${cpp} "  if (!found){\n")
  file(APPEND ${cpp} "    std::cout << \"  ERROR! could not find BRAIN-brainType \\\"\" << brainType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${cpp} "    exit(1);\n")
  file(APPEND ${cpp} "    }\n")
  file(APPEND ${cpp} "  return newBrain;\n")
  file(APPEND ${cpp} "}\n")

  # write genome factory
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//create a template genome\n")
  file(APPEND ${cpp} "auto makeTemplateGenome(std::shared_ptr<ParametersTable> PT) -> std::shared_ptr<AbstractGenome> {\n")
  file(APPEND ${cpp} "  std::shared_ptr<AbstractGenome> newGenome;\n")
  file(APPEND ${cpp} "  bool found = false;\n")
  file(APPEND ${cpp} "  std::string genomeType = AbstractGenome::genomeTypeStrPL->get(PT);\n")
  foreach(module_name ${list_genomes})
    file(APPEND ${cpp} "if (genomeType == \"${module_name}\") {\n")
    file(APPEND ${cpp} "  newGenome = ${module_name}Genome_genomeFactory(PT);\n")
    file(APPEND ${cpp} "  found = true;\n")
    file(APPEND ${cpp} "  }\n")
  endforeach()
  file(APPEND ${cpp} "if (found == false){\n")
  file(APPEND ${cpp} "  std::cout << \"  ERROR! could not find GENOME-genomeType \\\"\" << genomeType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${cpp} "  exit(1);\n")
  file(APPEND ${cpp} "  }\n")
  file(APPEND ${cpp} "return newGenome;\n")
  file(APPEND ${cpp} "}\n")

  # write optimizer factory
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//create an optimizer\n")
  file(APPEND ${cpp} "auto makeOptimizer(std::shared_ptr<ParametersTable> PT) -> std::shared_ptr<AbstractOptimizer> {\n")
  file(APPEND ${cpp} "  std::shared_ptr<AbstractOptimizer> newOptimizer;\n")
  file(APPEND ${cpp} "  bool found = false;\n")
  file(APPEND ${cpp} "  std::string optimizerType = AbstractOptimizer::Optimizer_MethodStrPL->get(PT);\n")
  foreach(module_name ${list_optimizers})
    file(APPEND ${cpp} "  if (optimizerType == \"${module_name}\") {\n")
    file(APPEND ${cpp} "    newOptimizer = std::make_shared<${module_name}Optimizer>(PT);\n")
    file(APPEND ${cpp} "    found = true;\n")
    file(APPEND ${cpp} "    }\n")
  endforeach()
  file(APPEND ${cpp} "  if (!found){\n")
  file(APPEND ${cpp} "    std::cout << \"  ERROR! could not find OPTIMIZER-optimizer \\\"\" << optimizerType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${cpp} "    exit(1);\n")
  file(APPEND ${cpp} "    }\n")
  file(APPEND ${cpp} "  return newOptimizer;\n")
  file(APPEND ${cpp} "}\n")

  # write world factory
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//create a world\n")
  file(APPEND ${cpp} "auto makeWorld(std::shared_ptr<ParametersTable> PT) -> std::shared_ptr<AbstractWorld> {\n")
  file(APPEND ${cpp} "  std::shared_ptr<AbstractWorld> newWorld;\n")
  file(APPEND ${cpp} "  bool found = false;\n")
  file(APPEND ${cpp} "  std::string worldType = AbstractWorld::worldTypePL->get(PT);\n")
  foreach(module_name ${list_worlds})
    file(APPEND ${cpp} "  if (worldType == \"${module_name}\") {\n")
    file(APPEND ${cpp} "    newWorld = std::make_shared<${module_name}World>(PT);\n")
    file(APPEND ${cpp} "    found = true;\n")
    file(APPEND ${cpp} "    }\n")
  endforeach()
  file(APPEND ${cpp} "  if (!found){\n")
  file(APPEND ${cpp} "    std::cout << \"  ERROR! could not find WORLD-worldType \\\"\" << worldType << \"\\\".\\n  Exiting.\" << std::endl;\n")
  file(APPEND ${cpp} "    exit(1);\n")
  file(APPEND ${cpp} "    }\n")
  file(APPEND ${cpp} "  return newWorld;\n")
  file(APPEND ${cpp} "}\n")

  string(REPLACE ";" ", " options_archivists "${list_archivists}")
  string(REPLACE ";" ", " options_brains "${list_brains}")
  string(REPLACE ";" ", " options_genomes "${list_genomes}")
  string(REPLACE ";" ", " options_optimizers "${list_optimizers}")
  string(REPLACE ";" ", " options_worlds "${list_worlds}")

  list(FIND list_archivists "${default_Archivist}" has_archivist)
  if(has_archivist EQUAL "-1")
    list(GET list_archivists 0 default_Archivist)
    set(default_Archivist "${default_Archivist}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_brains "${default_Brain}" has_brain)
  if(has_brain EQUAL "-1")
    list(GET list_brains 0 default_Brain)
    set(default_Brain "${default_Brain}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_genomes "${default_Genome}" has_genome)
  if(has_genome EQUAL "-1")
    list(GET list_genomes 0 default_Genome)
    set(default_Genome "${default_Genome}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_optimizers "${default_Optimizer}" has_optimizer)
  if(has_optimizer EQUAL "-1")
    list(GET list_optimizers 0 default_Optimizer)
    set(default_Optimizer "${default_Optimizer}" CACHE STRING "" FORCE)
  endif()
  list(FIND list_worlds "${default_World}" has_world)
  if(has_world EQUAL "-1")
    list(GET list_worlds 0 default_World)
    set(default_World "${default_World}" CACHE STRING "" FORCE)
  endif()

  # configure Defaults and Documentation
  file(APPEND ${cpp} "\n")
  file(APPEND ${cpp} "//configure Defaults and Documentation\n")
  file(APPEND ${cpp} "void configureDefaultsAndDocumentation(){\n")
  file(APPEND ${cpp} "  Parameters::root->setParameter(\"BRAIN-brainType\", (std::string)\"${default_Brain}\");\n")
  file(APPEND ${cpp} "  Parameters::root->setDocumentation(\"BRAIN-brainType\", \"brain to be used, [${options_brains}]\");\n")
  file(APPEND ${cpp} "  Parameters::root->setParameter(\"GENOME-genomeType\", (std::string)\"${default_Genome}\");\n")
  file(APPEND ${cpp} "  Parameters::root->setDocumentation(\"GENOME-genomeType\", \"genome to be used, [${options_genomes}]\");\n")
  file(APPEND ${cpp} "  Parameters::root->setParameter(\"ARCHIVIST-outputMethod\", (std::string)\"${default_Archivist}\");\n")
  file(APPEND ${cpp} "  Parameters::root->setDocumentation(\"ARCHIVIST-outputMethod\", \"output method, [${options_archivists}]\");\n")
  file(APPEND ${cpp} "  Parameters::root->setParameter(\"OPTIMIZER-optimizer\", (std::string)\"${default_Optimizer}\");\n")
  file(APPEND ${cpp} "  Parameters::root->setDocumentation(\"OPTIMIZER-optimizer\", \"optimizer to be used, [${options_optimizers}]\");\n")
  file(APPEND ${cpp} "  Parameters::root->setParameter(\"WORLD-worldType\", (std::string)\"${default_World}\");\n")
  file(APPEND ${cpp} "  Parameters::root->setDocumentation(\"WORLD-worldType\",\"world to be used, [${options_worlds}]\");\n")
  file(APPEND ${cpp} "}\n")

  #
  # write consturctors.h
  #
  file(WRITE  ${h} "//  MABE is a product of The Hintze Lab @ MSU\n")
  file(APPEND ${h} "//     for general research information:\n")
  file(APPEND ${h} "//         http://hintzelab.msu.edu/\n")
  file(APPEND ${h} "//     for MABE documentation:\n")
  file(APPEND ${h} "//         github.com/Hintzelab/MABE/wiki\n")
  file(APPEND ${h} "//\n")
  file(APPEND ${h} "//  Copyright (c) 2019 Michigan State University. All rights reserved.\n")
  file(APPEND ${h} "//     to view the full license, visit:\n")
  file(APPEND ${h} "//          github.com/Hintzelab/MABE/wiki\n")
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//  This file was auto-generated from cmake\n")
  file(APPEND ${h} "\n")
  file(APPEND ${h} "#pragma once\n")
  foreach(module_name ${list_archivists})
    if(${module_name} MATCHES "Default")
      file(APPEND ${h} "#include <Archivist/${module_name}Archivist.h>\n")
    else()
      file(APPEND ${h} "#include <Archivist/${module_name}Archivist/${module_name}Archivist.h>\n")
    endif()
  endforeach()
  foreach(module_name ${list_brains})
    file(APPEND ${h} "#include <Brain/${module_name}Brain/${module_name}Brain.h>\n")
  endforeach()
  foreach(module_name ${list_genomes})
    file(APPEND ${h} "#include <Genome/${module_name}Genome/${module_name}Genome.h>\n")
  endforeach()
  foreach(module_name ${list_optimizers})
    file(APPEND ${h} "#include <Optimizer/${module_name}Optimizer/${module_name}Optimizer.h>\n")
  endforeach()
  foreach(module_name ${list_worlds})
    file(APPEND ${h} "#include <World/${module_name}World/${module_name}World.h>\n")
  endforeach()

  # write archivist factory
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//create-archivist factory signature\n")
  file(APPEND ${h} "auto makeArchivist(std::vector<std::string> /*popFileColumns*/, std::shared_ptr<Abstract_MTree> _maxFormula, std::shared_ptr<ParametersTable> PT, std::string /*groupPrefix*/) -> std::shared_ptr<DefaultArchivist>;\n")

  # write brain factory
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//create-template-brain factory signature\n")
  file(APPEND ${h} "auto makeTemplateBrain(int /*inputs*/, int /*outputs*/, std::shared_ptr<ParametersTable> /*PT*/) -> std::shared_ptr<AbstractBrain>;\n")

  # write genome factory
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//create-template-genome factory signature\n")
  file(APPEND ${h} "auto makeTemplateGenome(std::shared_ptr<ParametersTable> /*PT*/) -> std::shared_ptr<AbstractGenome>;\n")

  # write optimizer factory
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//create an optimizer\n")
  file(APPEND ${h} "auto makeOptimizer(std::shared_ptr<ParametersTable> /*PT*/) -> std::shared_ptr<AbstractOptimizer>;\n")

  # write world factory
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//create-world factory signature\n")
  file(APPEND ${h} "auto makeWorld(std::shared_ptr<ParametersTable> PT) -> std::shared_ptr<AbstractWorld>;\n")

  # configure Defaults and Documentation
  file(APPEND ${h} "\n")
  file(APPEND ${h} "//Defaults and Documentation signature\n")
  file(APPEND ${h} "auto configureDefaultsAndDocumentation() -> void;\n")
endfunction()

#
# include other main-level cpp files
#
target_sources(${EXE} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/Global.cpp)
target_sources(${EXE} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/Global.h)
target_sources(${EXE} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/module_factories.cpp)
target_sources(${EXE} PRIVATE ${CMAKE_CURRENT_LIST_DIR}/module_factories.h)

include(${CMAKE_CURRENT_LIST_DIR}/Analyze/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Archivist/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Brain/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Genome/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Group/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Optimizer/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Organism/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/Utilities/CMakeLists.txt)
include(${CMAKE_CURRENT_LIST_DIR}/World/CMakeLists.txt)

include_directories(code)

list(LENGTH list_archivists num_archivists)
list(LENGTH list_brains num_brains)
list(LENGTH list_genomes num_genomes)
list(LENGTH list_optimizers num_optimizers)
list(LENGTH list_worlds num_worlds)

set(default_Archivist "" CACHE STRING "")
if( num_archivists GREATER 0 )
  if("${default_Archivist}" STREQUAL "")
    list(GET list_archivists 0 default_Archivist)
    set(default_Archivist "${default_Archivist}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_Brain "" CACHE STRING "")
if( num_brains GREATER 0 )
  if("${default_Brain}" STREQUAL "")
    list(GET list_brains 0 default_Brain)
    set(default_Brain "${default_Brain}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_Genome "" CACHE STRING "")
if( num_genomes GREATER 0 )
  if("${default_Genome}" STREQUAL "")
    list(GET list_genomes 0 default_Genome)
    set(default_Genome "${default_Genome}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_Optimizer "" CACHE STRING "")
if( num_optimizers GREATER 0 )
  if("${default_Optimizer}" STREQUAL "")
    list(GET list_optimizers 0 default_Optimizer)
    set(default_Optimizer "${default_Optimizer}" CACHE STRING "" FORCE)
  endif()
endif()
set(default_World "" CACHE STRING "")
if( num_worlds GREATER 0 )
  if("${default_World}" STREQUAL "")
    list(GET list_worlds 0 default_World)
    set(default_World "${default_World}" CACHE STRING "" FORCE)
  endif()
endif()

# if we have sufficient information, then continue and build modules.h
if( (num_brains GREATER 0) AND (num_genomes GREATER 0) AND (num_worlds GREATER 0) )
  message(STATUS "Updating code/module_factories.h code/module_factories.cpp")
  write_module_factories()
  #else()
  #  message(FATAL_ERROR "You must enable at least 1 of each modules: Brain, Genome, World")
endif()

# make files appear in proper directory structure in Visual Studio
file(GLOB_RECURSE _headers ${CMAKE_CURRENT_LIST_DIR}/*.h)
file(GLOB_RECURSE _altheaders ${CMAKE_CURRENT_LIST_DIR}/*.hpp)
file(GLOB_RECURSE _cpps ${CMAKE_CURRENT_LIST_DIR}/*.cpp)
file(GLOB_RECURSE _altcpps ${CMAKE_CURRENT_LIST_DIR}/*.c)
file(GLOB_RECURSE _alt2cpps ${CMAKE_CURRENT_LIST_DIR}/*.c)
source_group(TREE ${CMAKE_CURRENT_LIST_DIR} PREFIX "MABE" FILES ${_headers} ${_altheaders} ${_cpps} ${_altcpps} ${_alt2cpps})
